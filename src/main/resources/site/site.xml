<?xml version="1.0" encoding="UTF-8"?>
<site>
  <!--mappings>
    <mapping filter="/site/filters/security-headers.js" order="10"> 
      <pattern>/.*</pattern>
    </mapping>
  </mappings-->
  <processors>
    <response-processor name="security-headers" order="10"/>  
  </processors>
  <form>
      <input name="useConfigFile" type="CheckBox">
          <label>Use config file instead of site config.</label>
          <help-text>Use configuration from file in $XP_HOME/config/no.bouvet.app.security-headers.cfg instead of the parameters specified in site config.</help-text>
      </input>

      <item-set name="strictTransportSecurity">
          <label>Strict-Transport-Security</label>
          <help-text>HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections,[1] and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797</help-text>
          <occurrences minimum="0" maximum="1"/>
          <items>
              <input name="maxAge" type="Long">
                  <label>Strict-Transport-Security max-age</label>
                  <help-text>The time, in seconds, that the browser should remember that a site is only to be accessed using HTTPS.</help-text>
                  <default>31536000</default>
              </input>
              <input name="includeSubdomains" type="CheckBox">
                  <label>Include subdomains</label>
                  <help-text>If this optional parameter is specified, this rule applies to all of the site's subdomains as well.</help-text>
              </input>
              <input name="preload" type="CheckBox">
                  <label>Preload</label>
                  <help-text>Google maintains an HSTS preload service. By following the guidelines and successfully submitting your domain, browsers will never connect to your domain using an insecure connection. While the service is hosted by Google, all browsers have stated an intent to use (or actually started using) the preload list. However, it is not part of the HSTS specification and should not be treated as official.</help-text>
              </input>
          </items>
      </item-set>

      <item-set name="contentSecurityPolicy">
          <label>Content-Security-Policy</label>
          <help-text>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. Read more about CSP at https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP .</help-text>
          <occurrences minimum="0" maximum="1"/>
          <items>
              <option-set name="commonDirectives">
                  <label>Common Directives</label>
                  <occurrences minimum="1" maximum="1"/>
                  <options minimum="0" maximum="0">
                      <option name="default-src">
                          <label>default-src</label>
                          <default>true</default>
                          <help-text>Serves as a fallback for the other fetch directives. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/default-src</help-text>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self'</default>
                              </input>
                          </items>
                      </option>
                      <option name="base-uri">
                          <label>base-uri</label>
                          <default>true</default>
                          <help-text>Restricts the URLs which can be used in a document's &lt;base&gt; element. Not setting this allows any URL (no fallback).</help-text>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self'</default>
                              </input>
                          </items>
                      </option>
                      <option name="form-action">
                          <label>form-action</label>
                          <default>true</default>
                          <help-text>Restricts the URLs which can be used as the target of a form submissions from a given context. Not setting this allows anything (no fallback). Warning: Whether form-action should block redirects after a form submission is debated and browser implementations of this aspect are inconsistent. See more at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/form-action</help-text>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self'</default>
                              </input>
                          </items>
                      </option>
                      <option name="object-src">
                          <label>object-src</label>
                          <default>true</default>
                          <help-text>Specifies valid sources for the &lt;object&gt;, &lt;embed&gt;, and &lt;applet&gt; elements. Defaults back to default-src, but it is recommended to restrict this fetch-directive (e.g. explicitly set object-src 'none' if possible) as elements controlled by object-src are perhaps coincidentally considered legacy HTML elements and aren't receiving new standardized features (such as the security attributes sandbox or allow for &lt;iframe&gt;). See more at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/object-src</help-text>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'none'</default>
                              </input>
                          </items>
                      </option>
                      <option name="script-src">
                          <label>script-src</label>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self'</default>
                              </input>
                          </items>
                      </option>
                      <option name="font-src">
                          <label>font-src</label>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self' data:</default>
                              </input>
                          </items>
                      </option>
                      <option name="frame-src">
                          <label>frame-src</label>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self'</default>
                              </input>
                          </items>
                      </option>
                      <option name="img-src">
                          <label>img-src</label>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self' data:</default>
                              </input>
                          </items>
                      </option>
                      <option name="media-src">
                          <label>media-src</label>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self' data:</default>
                              </input>
                          </items>
                      </option>
                      <option name="style-src">
                          <label>style-src</label>
                          <items>
                              <input name="directiveValues" type="TextArea">
                                  <label>Directive values</label>
                                  <default>'self'</default>
                              </input>
                          </items>
                      </option>
                  </options>
              </option-set>

              <item-set name="extraDirectives">
                  <label>Extra directives</label>
                  <occurrences minimum="0" maximum="0"/>
                  <items>
                      <input name="directiveName" type="TextLine">
                          <label>Directive Name</label>
                          <occurrences minimum="0" maximum="1"/>
                      </input>
                      <input name="directiveValues" type="TextArea">
                          <label>Directive Values</label>
                          <occurrences minimum="0" maximum="1"/>
                      </input>
                  </items>
              </item-set>
          </items>
      </item-set>

      <option-set name="xFrameOptions">
          <label>X-Frame-Options</label>
          <expanded>true</expanded>
          <occurrences minimum="0" maximum="1"/>
          <help-text>The X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a &lt;frame&gt;, &lt;iframe&gt; or &lt;object&gt; . Sites can use this to avoid clickjacking attacks, by ensuring that their content is not embedded into other sites. Full description of all the options available at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</help-text>
          <options minimum="1" maximum="1">
              <option name="deny">
                  <label>DENY</label>
                  <help-text>The page can only be displayed in a frame on the same origin as the page itself.</help-text>
              </option>
              <option name="sameorigin">
                  <label>SAMEORIGIN</label>
                  <help-text>The page cannot be displayed in a frame, regardless of the site attempting to do so.</help-text>
              </option>
              <option name="allowFrom">
                  <label>ALLOW-FROM</label>
                  <help-text>Obsolete directive that no longer works in modern browsers. From MDN link (see help-text for X-Frame-Options): "Don't use it."</help-text>
                  <items>
                      <input name="uri" type="TextLine">
                          <label>ALLOW-FROM uri</label>
                          <help-text>The page can only be displayed in a frame on the specified origin. Note that in Firefox it doesn't check the frame ancestors to see if they are in the same origin.</help-text>
                      </input>
                  </items>
              </option>

          </options>
      </option-set>

      <option-set name="xXssProtection">
          <label>X-XSS-Protection</label>
          <expanded>true</expanded>
          <occurrences minimum="0" maximum="1"/>
          <help-text>If you do not need to support legacy browsers, it is recommended that you use Content-Security-Policy without allowing unsafe-inline scripts instead of using this, as "XSS protection can create XSS vulnerabilities in otherwise safe websites" - see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection.The HTTP X-XSS-Protection response header is a feature of Internet Explorer, Chrome and Safari that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks. Although these protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript ('unsafe-inline'), they can still provide protections for users of older web browsers that don't yet support CSP.</help-text>
          <options minimum="1" maximum="1">
              <option name="xss_0">
                  <label>Disabled (0)</label>
                  <help-text>Disables XSS filtering</help-text>
              </option>
              <option name="xss_1">
                  <label>Enabled (1)</label>
                  <help-text>Enables XSS filtering (usually default in browsers). If a cross-site scripting attack is detected, the browser will sanitize the page (remove the unsafe parts).</help-text>
                  <default>true</default>
              </option>
              <option name="xss_1_block">
                  <label>Enabled, block mode (1; mode=block)</label>
                  <help-text>Enables XSS filtering. Rather than sanitizing the page, the browser will prevent rendering of the page if an attack is detected.</help-text>
              </option>
              <option name="xss_1_report">
                  <label>Enabled, report mode (1; report=report_url) (Chromium only)</label>
                  <help-text>Enables XSS filtering. If a cross-site scripting attack is detected, the browser will sanitize the page and report the violation. This uses the functionality of the CSP report-uri directive to send a report.</help-text>
                  <items>
                      <input name="url" type="TextLine">
                          <label>Report URL</label>
                      </input>
                  </items>
              </option>
          </options>
      </option-set>

      <item-set name="xContentTypeOptions">
          <label>X-Content-Type-Options</label>
          <help-text>The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised in the Content-Type headers should not be changed and be followed. This allows to opt-out of MIME type sniffing, or, in other words, it is a way to say that the webmasters knew what they were doing.</help-text>
          <items>
              <input name="value" type="TextLine">
                  <label>X-Content-Type-Options</label>
                  <default>nosniff</default>
              </input>
          </items>
      </item-set>

      <item-set name="referrerPolicy">
          <label>Referrer-Policy</label>
          <help-text>The Referrer-Policy HTTP header governs which referrer information, sent in the Referer header, should be included with requests made.</help-text>
          <items>
              <input name="referrerPolicy" type="RadioButton">
                  <label>Referrer-Policy</label>
                  <help-text>Full description of the options at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy</help-text>
                  <config>
                      <option value="no-referrer">no-referrer</option>
                      <option value="no-referrer-when-downgrade">no-referrer-when-downgrade</option>
                      <option value="origin">origin</option>
                      <option value="origin-when-cross-origin">origin-when-cross-origin</option>
                      <option value="same-origin">same-origin</option>
                      <option value="strict-origin">strict-origin</option>
                      <option value="strict-origin-when-cross-origin">strict-origin-when-cross-origin</option>
                      <option value="unsafe-url">unsafe-url</option>
                  </config>
                  <default>no-referrer</default>
              </input>
          </items>
      </item-set>

    <item-set name="permissionsPolicy">
        <label>Permissions-Policy</label>
        <help-text>The HTTP Permissions-Policy header provides a mechanism to allow and deny the use of browser features in a document or within any &lt;iframe&gt; elements in the document. To allow features for &lt;iframe&gt; the feature must be enabled both in the header and by using the 'allow' attribute on the &lt;iframe&gt;. For more information, see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy.</help-text>
        <items>
          <input name="policy" type="TextArea">
            <label>Policy</label>
            <help-text>Syntax: &lt;directive&gt;=&lt;allowlist&gt;. Example: geolocation=() (block all access to geolocation). For list of directives, see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy#directives.</help-text>
          </input>
        </items>
    </item-set>
  </form>
</site>
